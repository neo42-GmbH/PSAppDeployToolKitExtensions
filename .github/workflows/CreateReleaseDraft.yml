name: Release

on:
  workflow_dispatch:
  milestone:
    types:
      - closed

jobs:
  artifact:
    uses: ./.github/workflows/reusable_CreateArtifact.yml
    with:
      PSADT_VERSION: ${{ vars.TARGET_ADT_VERSION  }}

  test:
    needs: artifact
    uses: ./.github/workflows/reusable_TestArtifact.yml

  release:
    needs:
      - artifact
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: read

    steps:
      - name: download-artifact
        id: download-artifact-release
        uses: actions/download-artifact@v4

      - name: zip-artifact
        shell: pwsh
        run: |
          $artifactPath = Get-ChildItem -Path "${{ steps.download-artifact-release.outputs.download-path }}" | Select-Object -First 1
          Compress-Archive -Path "$($artifactPath.FullName)/*" -DestinationPath "${{ github.workspace }}/PSAppDeployToolKitExtensions-${{ needs.artifact.outputs.ARTIFACT_VERSION }}.zip"

      - name: checkout-release-manager-config
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: ${{ github.workspace }}/ghrm
          sparse-checkout: .github/GithubReleaseManager/*
          sparse-checkout-cone-mode: false

      - name: install-dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x.x'

      - name: install-release-manager
        shell: pwsh
        run: dotnet tool install --global GitReleaseManager.Tool

      - name: create-release
        shell: pwsh
        run: |
          $params = @(
            'create',
            '--owner', '${{ github.repository_owner }}',
            '--repository', '${{ github.event.repository.name }}',
            '--token', '${{ secrets.GITHUB_TOKEN }}',
            '--targetcommitish', '${{ github.sha }}',
            '--targetDirectory', '${{ github.workspace }}/ghrm/.github/GithubReleaseManager',
            '--assets', '${{ github.workspace }}/PSAppDeployToolKitExtensions-${{ needs.artifact.outputs.ARTIFACT_VERSION }}.zip'
          )

          if ('${{ github.event_name }}' -eq 'milestone') {
            Write-Host "Creating release from milestone '${{ github.event.milestone.title }}' on '$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')'."
            $params += '--milestone', '"${{ github.event.milestone.title }}"'
            $params += '--name', '${{ needs.artifact.outputs.ARTIFACT_VERSION }}'
          }
          else {
            Write-Host "Creating pre-release from ref '${{ github.ref_name }}'"
            Set-Content -Path '${{ github.workspace }}/prerelease.md' -Encoding UTF8 -Force -Value `
            "This is a pre-release build from commit [${{ github.sha }}](${{ github.server_url}}/${{ github.repository }}/commit/${{ github.sha }}). Releases like this are not intended for production use.
            There will be no changelog or release notes for this build. Please refer to the [latest stable](https://github.com/${{ github.repository }}/releases/latest) release for more information.

            If you have any questions or concerns, please contact the development team."
            $params += '--pre'
            $params += '--inputFilePath', '${{ github.workspace }}/prerelease.md'
            $params += '--name', '${{ needs.artifact.outputs.ARTIFACT_VERSION }}-${{ github.ref_name }}-unstable'
          }

          $proc = Start-Process -FilePath dotnet-gitreleasemanager -ArgumentList $params -NoNewWindow -Wait -PassThru
          exit $proc.ExitCode
